name: CI

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

permissions:
  contents: read

jobs:
  build-test:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    strategy:
      matrix:
        envset: [core, server]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install project (editable)
        run: |
          pip install --upgrade pip
          if [ "${{ matrix.envset }}" = "server" ]; then
            pip install -e .[dev,security,server]
          else
            pip install -e .[dev,security]
          fi
          pip install build

      - name: Cache mypy
        uses: actions/cache@v4
        with:
            path: .mypy_cache
            key: mypy-${{ runner.os }}-${{ hashFiles('**/*.py') }}
            restore-keys: |
              mypy-${{ runner.os }}-

      - name: Lint (ruff)
        id: lint
        continue-on-error: true
        run: |
          set -o pipefail
          ruff check . | tee lint_output.txt || true

      - name: Type check (mypy)
        id: mypy
        continue-on-error: true
        run: |
          set -o pipefail
          mypy --install-types --non-interactive . | tee mypy_output.txt || true

      - name: Run tests with coverage (no early exit)
        id: pytest
        continue-on-error: true
        env:
          PYTHONWARNINGS: ignore::DeprecationWarning:scipy.sparse.linalg
        run: |
          set -o pipefail
          pytest -q --cov=./ --cov-report=xml --cov-report=term --cov-fail-under=85 | tee pytest_output.txt || true

      - name: Enforce coverage threshold
        id: coverage
        continue-on-error: true
        shell: bash
        run: |
          python - <<'PY'
            import xml.etree.ElementTree as ET, sys
            try:
                root = ET.parse('coverage.xml').getroot()
                rate = float(root.get('line-rate', '0')) * 100
                threshold = 85.0
                print(f"Line coverage: {rate:.2f}% (threshold {threshold}%)")
                if rate < threshold:
                    print("::error::Coverage below threshold")
                    sys.exit(1)
            except FileNotFoundError:
                print('::error::coverage.xml missing')
                sys.exit(1)
          PY

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          files: coverage.xml
          fail_ci_if_error: true
          verbose: true
        if: ${{ matrix.envset == 'server' }}

      - name: Build wheel
        run: |
            python -m build --wheel
        if: ${{ matrix.envset == 'server' }}

      - name: Security audit (pip-audit)
        run: |
          pip-audit -r requirements.txt || true
        if: ${{ matrix.envset == 'server' }}

      - name: Upload coverage artifact
        uses: actions/upload-artifact@v4
        with:
          name: coverage-xml-${{ matrix.envset }}
          path: coverage.xml
          if-no-files-found: warn

      - name: Upload reports artifacts
        uses: actions/upload-artifact@v4
        with:
          name: reports-${{ matrix.envset }}
          path: |
            lint_output.txt
            mypy_output.txt
            pytest_output.txt
          if-no-files-found: warn

      - name: Fail job if any step failed
        if: ${{ steps.lint.outcome == 'failure' || steps.mypy.outcome == 'failure' || steps.pytest.outcome == 'failure' || steps.coverage.outcome == 'failure' }}
        run: |
          echo "One or more quality gates failed." >&2
          echo "lint outcome: ${{ steps.lint.outcome }}" >&2
          echo "mypy outcome: ${{ steps.mypy.outcome }}" >&2
            echo "pytest outcome: ${{ steps.pytest.outcome }}" >&2
          echo "coverage outcome: ${{ steps.coverage.outcome }}" >&2
          exit 1
